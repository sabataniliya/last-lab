public abstract class Animal {
    protected int legs;
    public Animal(){
        this.legs=legs;
    }
    public  void Walk(){
        System.out.println("walk in many ways");
    }
    public abstract void eat();
}
public class Spider extends Animal{
    public Spider(){
        System.out.println("spider is created");
    }

    @Override
    public void eat() {
        System.out.println("spider eat other insects");
    }
}
public class Cat extends Animal implements Pet{
    String name1;
    public void setName(String n1){
     this.name1=n1;
    }
    public String getName(){
        return name1;
    }

    public Cat(){
        System.out.println("cat is created");
    }
    public Cat(String n1){
        this.name1=n1;
    }
    public void play(){
        System.out.println("cat plays with yarn");
    }

    @Override
    public void eat() {
        System.out.println("cat eat catfood");
    }
}
public interface Pet {
    
    public void setName(String n3);
    public String getName();
    public void play();}
public class Fish extends Animal implements Pet{
    String name2;
    public Fish(){
        System.out.println("fish is created");
    }
    public String getName(){
        return name2;
    }
    public void setName(String n2){
      this.name2=n2;
    }

    @Override
    public void Walk() {
        super.Walk();
    }

    @Override
    public void eat() {
        System.out.println("fish eat fishfood");
    }
    public void play(){
        System.out.println("fish plays with ball");
    }
}
public class Main {
    public static void main(String[] args) {
        Spider sp=new Spider();
        sp.eat();
        Cat c=new Cat();
        c.eat();
        c.play();
        Fish f=new Fish();
        f.Walk();
        f.eat();
        f.play();
    }
}
